@using Syncfusion.Blazor.Grids
@using EmprendeUCR.Application.PaymentInfos;
@using EmprendeUCR.Application.PaymentMethods;
@using EmprendeUCR.Domain.PaymentInfos.Entities;
@using EmprendeUCR.Domain.PaymentMethods.Entities;
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups

@inject NavigationManager NavigationManager
@inject ISinpeMovilPaymentInfoService SinpeMovilPaymentInfoService
@inject IPaymentInfoService PaymentInfoService
@inject ISinpeMovilPaymentMethodService SinpeMovilPaymentMethodService
@inject IHasPaymentInfoService HasPaymentInfoService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inherits SinpeMovilPaymentInfoEntrepreneurBase

<SfGrid ID="SinpeMovilGrid" @ref="SinpeMovilPaymentInfoGrid" AllowSorting="true" DataSource="@_sinpeMovilPaymentInfoList" Toolbar="SinpeMovilToolbarItems">
    <GridEditSettings AllowEditing="true" AllowEditOnDblClick="false" AllowDeleting="true"></GridEditSettings>
    <GridEvents OnToolbarClick="SinpeMovilToolbarClickHandler" CommandClicked="SinpeMovilCommandClicked" TValue="SinpeMovilPaymentInfo"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(SinpeMovilPaymentInfo.Phone_Number) HeaderText="Número de teléfono" IsPrimaryKey="true"></GridColumn>
        <GridColumn HeaderText="Acciones" TextAlign="TextAlign.Left">
            <GridCommandColumns>
                <GridCommandColumn Title="Editar" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                <GridCommandColumn Title="Eliminar" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
    <GridTemplates>
        <EmptyRecordTemplate>
            <span>No existen datos registrados</span>
        </EmptyRecordTemplate>
    </GridTemplates>
</SfGrid>

<SfDialog ID="addSinpeMovilInfoDialog" IsModal="true" Width="300px" @bind-Visible="@AddSinpePhoneNumberDialogVisible">
    <DialogTemplates>
        <Header>
            Agregar número de teléfono
        </Header>
        <Content>
            <div id='input-container'>
                <div class="e-float-input e-input-group">
                    <input id="number" type="number" @bind="@AddedNumber" required />
                    <span class="e-float-line"></span>
                    <label class="e-float-text">Número</label>
                </div>
            </div>
            <p></p>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Agregar" IsPrimary="true" OnClick="@AddSinpePhoneNumber" />
        <DialogButton Content="Cancelar" IsPrimary="true" OnClick="@CloseAddSinpePhoneNumberDialog" />
    </DialogButtons>
</SfDialog>

@code {
    [Parameter]
    public string emailToRegister { get; set; } = string.Empty;
    [Parameter]
    public List<HasPaymentInfo> list { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(emailToRegister))
        {
            _sinpeMovilPaymentInfoList = await SinpeMovilPaymentInfoService.GetSinpeMovilPaymentInfosByPaymentInfoIDAsync(list);
        }
        else
        {
            string Email = await sessionStorage.GetItemAsync<string>("Email");
            if (Email != null)
            {
                _sinpeMovilPaymentInfoList = await SinpeMovilPaymentInfoService.GetSinpeMovilPaymentInfosByPaymentInfoIDAsync(list);
            }
        }
        SinpeMovilToolbarItems.Add(new ItemModel()
        {
            Text = AddButtonTitle,
            TooltipText = "Agrega una cuenta IBAN y la asocia a una tarjeta",
        });
    }

    protected async void AddSinpePhoneNumber()
    {
        AddSinpePhoneNumberDialogVisible = false;
        await AddSinpeMovilInfoAndClose();
        AddedNumber = "";
        StateHasChanged();
    }

    protected async Task AddSinpeMovilInfoAndClose()
    {
        PaymentInfo? PaymentInfo = await PaymentInfoService.AddPaymentInfoAsync();
        if (PaymentInfo != null)
        {
            SinpeMovilPaymentMethod? sinpeMovilPM = await SinpeMovilPaymentMethodService.GetPaymentMethodByIdAsync(SINPE_MOVIL);
            await SinpeMovilPaymentInfoGrid.AddRecord();
            if (sinpeMovilPM != null)
            {
                int PhoneNumber = int.Parse(AddedNumber); // TODO: Hacer la validacion correcta
                SinpeMovilPaymentInfo sinpeMovilPI = new SinpeMovilPaymentInfo(PhoneNumber, PaymentInfo.ID, sinpeMovilPM.Name);
                await SinpeMovilPaymentInfoService.AddPaymentInfoAsync(sinpeMovilPI);
                _sinpeMovilPaymentInfoList = await SinpeMovilPaymentInfoService.GetSinpeMovilPaymentInfosAsync();
                await SinpeMovilPaymentMethodService.AddPaymentInfoToPaymentMethodAsync(sinpeMovilPM, sinpeMovilPI);
            }
        }
    }
}