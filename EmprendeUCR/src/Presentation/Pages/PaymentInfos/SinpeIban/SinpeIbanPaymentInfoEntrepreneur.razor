@using Syncfusion.Blazor.Grids
@using EmprendeUCR.Application.PaymentInfos;
@using EmprendeUCR.Application.PaymentMethods;
@using EmprendeUCR.Domain.PaymentInfos.Entities;
@using EmprendeUCR.Domain.PaymentMethods.Entities;
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups

@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ISinpeIbanPaymentInfoService SinpeIbanPaymentInfoService
@inject IPaymentInfoService PaymentInfoService
@inject ISinpeIbanPaymentMethodService SinpeIbanPaymentMethodService
@inject IHasPaymentInfoService HasPaymentInfoService
@inherits SinpeIbanPaymentInfoEntrepreneurBase

<SfGrid ID="SinpeIbanGrid" @ref="SinpeIbanPaymentInfoGrid" AllowSorting="true" DataSource="@_sinpeIbanPaymentInfoList" Toolbar="SinpeIbanToolbarItems">
    <GridEditSettings AllowEditing="true" AllowEditOnDblClick="false" AllowDeleting="true"></GridEditSettings>
    <GridEvents OnToolbarClick="SinpeIbanToolbarClickHandler" CommandClicked="SinpeIbanCommandClicked" TValue="SinpeIbanPaymentInfo"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(SinpeIbanPaymentInfo.Account_Number) HeaderText="Cuenta IBAN" IsPrimaryKey="true"></GridColumn>
        <GridColumn HeaderText="Acciones" TextAlign="TextAlign.Left">
            <GridCommandColumns>
                <GridCommandColumn Title="Editar" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                <GridCommandColumn Title="Eliminar" ButtonOption="@(new CommandButtonOptions() { IconCss = " e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
    <GridTemplates>
        <EmptyRecordTemplate>
            <span>No existen datos registrados</span>
        </EmptyRecordTemplate>
    </GridTemplates>
</SfGrid>

<SfDialog ID="addSinpeIbanInfoDialog" IsModal="true" Width="300px" @bind-Visible="@AddSinpeIbanDialogVisible">
    <DialogTemplates>
        <Header>
            Agregar cuenta IBAN
        </Header>
        <Content>
            <div id='input-container'>
                <div class="e-float-input e-input-group">
                    <input id="number" type="number" @bind="@AddedSinpeIban" required />
                    <span class="e-float-line"></span>
                    <label class="e-float-text">Cuenta IBAN</label>
                </div>
            </div>
            <p></p>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Agregar" IsPrimary="true" OnClick="@AddSinpeIban" />
        <DialogButton Content="Cancelar" IsPrimary="true" OnClick="@CloseAddSinpeIbanDialog" />
    </DialogButtons>
</SfDialog>

@code {
    [Parameter]
    public string emailToRegister { get; set; } = string.Empty;
    [Parameter]
    public List<HasPaymentInfo> list { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(emailToRegister))
        {
            _sinpeIbanPaymentInfoList = await SinpeIbanPaymentInfoService.GetSinpeIbanPaymentInfosByPaymentInfoIDAsync(list);
        }
        else
        {
            string Email = await sessionStorage.GetItemAsync<string>("Email");
            if (Email != null)
            {
                _sinpeIbanPaymentInfoList = await SinpeIbanPaymentInfoService.GetSinpeIbanPaymentInfosByPaymentInfoIDAsync(list);
            }
        }
        SinpeIbanToolbarItems.Add(new ItemModel()
        {
            Text = AddButtonTitle,
            TooltipText = "Agrega una cuenta IBAN y la asocia a una tarjeta",
        });

    }

    protected async void AddSinpeIban()
    {
        AddSinpeIbanDialogVisible = false;
        await AddSinpeIbanInfoAndClose();
        AddedSinpeIban = "";
        StateHasChanged();
    }

    protected async Task AddSinpeIbanInfoAndClose()
    {
        PaymentInfo? PaymentInfo = await PaymentInfoService.AddPaymentInfoAsync();
        if (PaymentInfo != null)
        {
            SinpeIbanPaymentMethod? sinpeIbanPM = await SinpeIbanPaymentMethodService.GetPaymentMethodByIdAsync(SINPE_IBAN);
            await SinpeIbanPaymentInfoGrid.AddRecord();
            if (sinpeIbanPM != null)
            {
                string AccountNumber = AddedSinpeIban; // TODO: Hacer la validacion correcta
                SinpeIbanPaymentInfo sinpeIbanPI = new SinpeIbanPaymentInfo(AccountNumber, PaymentInfo.ID, sinpeIbanPM.Name);
                await SinpeIbanPaymentInfoService.AddPaymentInfoAsync(sinpeIbanPI);
                _sinpeIbanPaymentInfoList = await SinpeIbanPaymentInfoService.GetSinpeIbanPaymentInfosAsync();
                await SinpeIbanPaymentMethodService.AddPaymentInfoToPaymentMethodAsync(sinpeIbanPM, sinpeIbanPI);
            }
        }

    }
} 